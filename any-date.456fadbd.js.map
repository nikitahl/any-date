{"mappings":"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","sources":["<anon>","script.js"],"sourcesContent":["let date = new Date();\nlet isCopied = false;\nconst currentDate = document.getElementById('current-date');\nconst localeSelect = document.getElementById('locale');\nconst timezoneSelect = document.getElementById('time-zone');\nconst timezoneFormatSelect = document.getElementById('time-zone-format');\nconst dayFormat = document.getElementById('day-format');\nconst monthFormat = document.getElementById('month-format');\nconst timeFormat = document.getElementById('time-format');\nconst dateFormat = document.getElementById('date-format');\nconst output = document.getElementById('output');\nconst codeOutput = document.getElementById('code');\nconst examples = document.querySelectorAll('.example');\nconst options = document.getElementById('options');\nconst copy = document.getElementById('copy');\nfunction outputResult(result, code) {\n    let currentDateValue = currentDate.value ? `\"${currentDate.value}\"` : '';\n    if (currentDateValue && dateFormat.value === 'utc') currentDateValue = `\"${currentDate.value}:00Z\"`;\n    const snippet = code ? `const date = new Date(${currentDateValue});${code};` : '';\n    output.innerText = `Result: ${result}`;\n    codeOutput.innerText = snippet;\n}\nfunction outputSeconds() {\n    const seconds = dateFormat.value === 'local' ? date.getSeconds() : date.getUTCSeconds();\n    const secondsCode = dateFormat.value === 'local' ? '\\ndate.getSeconds()' : '\\ndate.getUTCSeconds()';\n    outputResult(seconds, secondsCode);\n}\nfunction outputMinutes() {\n    const minutes = dateFormat.value === 'local' ? date.getMinutes() : date.getUTCMinutes();\n    const minutesCode = dateFormat.value === 'local' ? '\\ndate.getMinutes()' : '\\ndate.getUTCMinutes()';\n    outputResult(minutes, minutesCode);\n}\nfunction outputHours() {\n    const hours = dateFormat.value === 'local' ? date.getHours() : date.getUTCHours();\n    const hoursCode = dateFormat.value === 'local' ? '\\ndate.getHours()' : '\\ndate.getUTCHours()';\n    outputResult(hours, hoursCode);\n}\nfunction outputTime() {\n    const timeFormatResult = timeFormat.value === 'true' ? true : false;\n    const time = date.toLocaleTimeString(localeSelect.value, {\n        hour12: timeFormatResult,\n        timeZone: timezoneSelect.value,\n        timeZoneName: timezoneFormatSelect.value\n    });\n    const timeCode = `\nconst options = {\n  hour12: '${timeFormat.value}',\n  timeZone: '${timezoneSelect.value}',\n  timeZoneName: '${timezoneFormatSelect.value}'\n}\n\ndate.toLocaleTimeString('${localeSelect.value}', options)`;\n    outputResult(time, timeCode);\n}\nfunction outputWeekday() {\n    const day = dateFormat.value === 'local' ? date.getDay() : date.getUTCDay();\n    const dayCode = dateFormat.value === 'local' ? '\\ndate.getDay()' : '\\ndate.getUTCDay()';\n    outputResult(day, dayCode);\n}\nfunction outputMonthday() {\n    const monthDay = dateFormat.value === 'local' ? date.getDate() : date.getUTCDate();\n    const monthDayCode = dateFormat.value === 'local' ? '\\ndate.getDate()' : '\\ndate.getUTCDate()';\n    outputResult(monthDay, monthDayCode);\n}\nfunction outputDayname() {\n    const dayName = date.toLocaleString(localeSelect.value, {\n        weekday: dayFormat.value\n    });\n    const dayNameCode = `\nconst options = {\n  weekday: '${dayFormat.value}'\n};\n\ndate.toLocaleString('${localeSelect.value}', options)`;\n    outputResult(dayName, dayNameCode);\n}\nfunction outputMonth() {\n    const month = dateFormat.value === 'local' ? date.getMonth() : date.getUTCMonth();\n    const monthCode = dateFormat.value === 'local' ? '\\ndate.getMonth()' : '\\ndate.getUTCMonth()';\n    outputResult(month, monthCode);\n}\nfunction outputMonthname() {\n    const monthName = date.toLocaleString(localeSelect.value, {\n        month: monthFormat.value\n    });\n    const monthNameCode = `\nconst options = {\n  month: '${monthFormat.value}'\n};\n\ndate.toLocaleString('${localeSelect.value}', options)`;\n    outputResult(monthName, monthNameCode);\n}\nfunction outputYear() {\n    const year = dateFormat.value === 'local' ? date.getFullYear() : date.getUTCFullYear();\n    const yearCode = dateFormat.value === 'local' ? '\\ndate.getFullYear()' : '\\ndate.getUTCFullYear()';\n    outputResult(year, yearCode);\n}\nfunction outputDate() {\n    const fullDate = date.toLocaleDateString(localeSelect.value, {\n        weekday: dayFormat.value,\n        year: 'numeric',\n        month: monthFormat.value,\n        day: 'numeric',\n        timeZone: timezoneSelect.value,\n        timeZoneName: timezoneFormatSelect.value\n    });\n    const fullDateCode = `\nconst options = {\n  weekday: '${dayFormat.value}',\n  year: 'numeric',\n  month: '${monthFormat.value}',\n  day: 'numeric',\n  timeZone: '${timezoneSelect.value}',\n  timeZoneName: '${timezoneFormatSelect.value}'\n};\n\ndate.toLocaleDateString('${localeSelect.value}', options)`;\n    outputResult(fullDate, fullDateCode);\n}\nfunction outputDateTime() {\n    const timeFormatResult = timeFormat.value === 'true' ? true : false;\n    const fullDate = date.toLocaleString(localeSelect.value, {\n        weekday: dayFormat.value,\n        year: 'numeric',\n        month: monthFormat.value,\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: timeFormatResult,\n        timeZone: timezoneSelect.value,\n        timeZoneName: timezoneFormatSelect.value\n    });\n    const fullDateCode = `\nconst options = {\n  weekday: '${dayFormat.value}',\n  year: 'numeric',\n  month: '${monthFormat.value}',\n  day: 'numeric',\n  hour: '2-digit',\n  minute: '2-digit',\n  second: '2-digit',\n  hour12: '${timeFormat.value}',\n  timeZone: '${timezoneSelect.value}',\n  timeZoneName: '${timezoneFormatSelect.value}'\n};\n\ndate.toLocaleString('${localeSelect.value}', options)`;\n    outputResult(fullDate, fullDateCode);\n}\nfunction handleExampleClick(e) {\n    const element = e.currentTarget;\n    const id = element.id;\n    clearActiveElement();\n    element.classList.add('active');\n    date = new Date();\n    if (currentDate.value) {\n        let dateValue = currentDate.value;\n        if (dateFormat.value === 'utc') dateValue = `${dateValue}:00Z`;\n        date = new Date(dateValue);\n    }\n    switch(id){\n        case 'seconds':\n            outputSeconds();\n            break;\n        case 'minutes':\n            outputMinutes();\n            break;\n        case 'hours':\n            outputHours();\n            break;\n        case 'time':\n            outputTime();\n            break;\n        case 'weekday':\n            outputWeekday();\n            break;\n        case 'monthday':\n            outputMonthday();\n            break;\n        case 'dayname':\n            outputDayname();\n            break;\n        case 'month':\n            outputMonth();\n            break;\n        case 'monthname':\n            outputMonthname();\n            break;\n        case 'year':\n            outputYear();\n            break;\n        case 'date':\n            outputDate();\n            break;\n        case 'datetime':\n            outputDateTime();\n            break;\n        default:\n            outputDate();\n    }\n}\nfunction clearActiveElement() {\n    const activeElement = document.querySelector('.active');\n    if (activeElement) activeElement.classList.remove('active');\n}\nfunction handleFormChange() {\n    clearActiveElement();\n    outputResult('', '');\n}\nfunction handleCopy(e) {\n    if (codeOutput.innerText && !isCopied) {\n        navigator.clipboard.writeText(codeOutput.innerText);\n        const currentValue = e.target.innerText;\n        e.target.innerText = 'Copied!';\n        isCopied = true;\n        setTimeout(()=>{\n            e.target.innerText = currentValue;\n            isCopied = false;\n        }, 2000);\n    }\n}\nasync function populateLocales() {\n    try {\n        const response = await fetch('https://restcountries.com/v3.1/all');\n        const countries = await response.json();\n        const localeSet = new Set();\n        countries.forEach((country)=>{\n            const countryCode = country.cca2;\n            const languages = country.languages;\n            if (languages && countryCode) Object.entries(languages).forEach(([langCode, langName])=>{\n                const locale = `${langCode}-${countryCode}`;\n                const label = `${langName} (${countryCode})`;\n                localeSet.add(JSON.stringify({\n                    locale,\n                    label\n                }));\n            });\n        });\n        const localeEntries = Array.from(localeSet).map((item)=>JSON.parse(item));\n        localeEntries.sort((a, b)=>a.label.localeCompare(b.label));\n        localeSelect.innerHTML = '';\n        localeEntries.forEach(({ locale, label })=>{\n            const option = document.createElement('option');\n            option.value = locale;\n            option.textContent = label;\n            localeSelect.appendChild(option);\n        });\n    } catch (error) {\n        console.warn('Failed to load locales from API, using fallback.', error);\n    }\n}\nfunction getTimeZoneOffsetLabel(timeZone) {\n    try {\n        const now = new Date();\n        const options = {\n            timeZone,\n            hour: '2-digit',\n            minute: '2-digit',\n            timeZoneName: 'short'\n        };\n        const formatter = new Intl.DateTimeFormat('en-US', options);\n        const parts = formatter.formatToParts(now);\n        const tzPart = parts.find((p)=>p.type === 'timeZoneName');\n        return tzPart ? tzPart.value.replace('GMT', 'UTC') : '';\n    } catch (e) {\n        console.warn(e);\n        return '';\n    }\n}\nfunction populateTimeZones() {\n    let timeZones = [];\n    // Modern browsers support this API\n    if (typeof Intl.supportedValuesOf === 'function') try {\n        timeZones = Intl.supportedValuesOf('timeZone');\n        // Sort by name\n        timeZones.sort();\n        timezoneSelect.innerHTML = '';\n        // Add options\n        timeZones.forEach((zone)=>{\n            const offsetLabel = getTimeZoneOffsetLabel(zone);\n            const option = document.createElement('option');\n            option.value = zone;\n            option.textContent = `${zone} (${offsetLabel})`;\n            timezoneSelect.appendChild(option);\n        });\n    } catch (e) {\n        console.warn('Intl.supportedValuesOf(\"timeZone\") not available, using fallback.', e);\n    }\n}\nexamples.forEach((example)=>example.addEventListener('click', handleExampleClick));\noptions.addEventListener('change', handleFormChange);\ncopy.addEventListener('click', handleCopy);\npopulateLocales();\npopulateTimeZones();\n\n//# sourceMappingURL=any-date.456fadbd.js.map\n","let date = new Date()\nlet isCopied = false\nconst currentDate = document.getElementById('current-date')\nconst localeSelect = document.getElementById('locale')\nconst timezoneSelect = document.getElementById('time-zone')\nconst timezoneFormatSelect = document.getElementById('time-zone-format')\nconst dayFormat = document.getElementById('day-format')\nconst monthFormat = document.getElementById('month-format')\nconst timeFormat = document.getElementById('time-format')\nconst dateFormat = document.getElementById('date-format')\nconst output = document.getElementById('output')\nconst codeOutput = document.getElementById('code')\nconst examples = document.querySelectorAll('.example')\nconst options = document.getElementById('options')\nconst copy = document.getElementById('copy')\n\nfunction outputResult (result, code) {\n  let currentDateValue = currentDate.value ? `\"${currentDate.value}\"` : ''\n  if (currentDateValue && dateFormat.value === 'utc') {\n    currentDateValue = `\"${currentDate.value}:00Z\"`\n  }\n  const snippet = code ? `const date = new Date(${currentDateValue});${code};` : ''\n  output.innerText = `Result: ${result}`\n  codeOutput.innerText = snippet\n}\n\nfunction outputSeconds () {\n  const seconds = dateFormat.value === 'local' ? date.getSeconds() : date.getUTCSeconds()\n  const secondsCode = dateFormat.value === 'local' ? '\\ndate.getSeconds()' : '\\ndate.getUTCSeconds()'\n  outputResult(seconds, secondsCode)\n}\n\nfunction outputMinutes () {\n  const minutes = dateFormat.value === 'local' ? date.getMinutes() : date.getUTCMinutes()\n  const minutesCode = dateFormat.value === 'local' ? '\\ndate.getMinutes()' : '\\ndate.getUTCMinutes()'\n  outputResult(minutes, minutesCode)\n}\n\nfunction outputHours () {\n  const hours = dateFormat.value === 'local' ? date.getHours() : date.getUTCHours()\n  const hoursCode = dateFormat.value === 'local' ? '\\ndate.getHours()' : '\\ndate.getUTCHours()'\n  outputResult(hours, hoursCode)\n}\n\nfunction outputTime () {\n  const timeFormatResult = timeFormat.value === 'true' ? true : false\n  const time = date.toLocaleTimeString(localeSelect.value, { hour12: timeFormatResult, timeZone: timezoneSelect.value, timeZoneName: timezoneFormatSelect.value })\n  const timeCode = `\nconst options = {\n  hour12: '${timeFormat.value}',\n  timeZone: '${timezoneSelect.value}',\n  timeZoneName: '${timezoneFormatSelect.value}'\n}\n\ndate.toLocaleTimeString('${localeSelect.value}', options)`\n  outputResult(time, timeCode)\n}\n\nfunction outputWeekday () {\n  const day = dateFormat.value === 'local' ? date.getDay() : date.getUTCDay()\n  const dayCode = dateFormat.value === 'local' ? '\\ndate.getDay()' : '\\ndate.getUTCDay()'\n  outputResult(day, dayCode)\n}\n\nfunction outputMonthday () {\n  const monthDay = dateFormat.value === 'local' ? date.getDate() : date.getUTCDate()\n  const monthDayCode = dateFormat.value === 'local' ? '\\ndate.getDate()' : '\\ndate.getUTCDate()'\n  outputResult(monthDay, monthDayCode)\n}\n\nfunction outputDayname () {\n  const dayName = date.toLocaleString(localeSelect.value, { weekday: dayFormat.value })\n  const dayNameCode = `\nconst options = {\n  weekday: '${dayFormat.value}'\n};\n\ndate.toLocaleString('${localeSelect.value}', options)`\n  outputResult(dayName, dayNameCode)\n}\n\nfunction outputMonth () {\n  const month = dateFormat.value === 'local' ? date.getMonth() : date.getUTCMonth()\n  const monthCode = dateFormat.value === 'local' ? '\\ndate.getMonth()' : '\\ndate.getUTCMonth()'\n  outputResult(month, monthCode)\n}\n\nfunction outputMonthname () {\n  const monthName = date.toLocaleString(localeSelect.value, { month: monthFormat.value })\n  const monthNameCode = `\nconst options = {\n  month: '${monthFormat.value}'\n};\n\ndate.toLocaleString('${localeSelect.value}', options)`\n  outputResult(monthName, monthNameCode)\n}\n\nfunction outputYear () {\n  const year = dateFormat.value === 'local' ? date.getFullYear() : date.getUTCFullYear()\n  const yearCode = dateFormat.value === 'local' ? '\\ndate.getFullYear()' : '\\ndate.getUTCFullYear()'\n  outputResult(year, yearCode)\n}\n\nfunction outputDate () {\n  const fullDate = date.toLocaleDateString(localeSelect.value, { weekday: dayFormat.value, year: 'numeric', month: monthFormat.value, day: 'numeric', timeZone: timezoneSelect.value, timeZoneName: timezoneFormatSelect.value })\n  const fullDateCode = `\nconst options = {\n  weekday: '${dayFormat.value}',\n  year: 'numeric',\n  month: '${monthFormat.value}',\n  day: 'numeric',\n  timeZone: '${timezoneSelect.value}',\n  timeZoneName: '${timezoneFormatSelect.value}'\n};\n\ndate.toLocaleDateString('${localeSelect.value}', options)`\n  outputResult(fullDate, fullDateCode)\n}\n\nfunction outputDateTime () {\n  const timeFormatResult = timeFormat.value === 'true' ? true : false\n  const fullDate = date.toLocaleString(localeSelect.value, { weekday: dayFormat.value, year: 'numeric', month: monthFormat.value, day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: timeFormatResult, timeZone: timezoneSelect.value, timeZoneName: timezoneFormatSelect.value })\n  const fullDateCode = `\nconst options = {\n  weekday: '${dayFormat.value}',\n  year: 'numeric',\n  month: '${monthFormat.value}',\n  day: 'numeric',\n  hour: '2-digit',\n  minute: '2-digit',\n  second: '2-digit',\n  hour12: '${timeFormat.value}',\n  timeZone: '${timezoneSelect.value}',\n  timeZoneName: '${timezoneFormatSelect.value}'\n};\n\ndate.toLocaleString('${localeSelect.value}', options)`\n  outputResult(fullDate, fullDateCode)\n}\n\nfunction handleExampleClick (e) {\n  const element = e.currentTarget\n  const id = element.id\n  clearActiveElement()\n  element.classList.add('active')\n\n  date = new Date()\n  if (currentDate.value) {\n    let dateValue = currentDate.value\n    if (dateFormat.value === 'utc') {\n      dateValue = `${dateValue}:00Z`\n    }\n    date = new Date(dateValue)\n  }\n\n  switch (id) {\n  case 'seconds':\n    outputSeconds()\n    break\n  case 'minutes':\n    outputMinutes()\n    break\n  case 'hours':\n    outputHours()\n    break\n  case 'time':\n    outputTime()\n    break\n  case 'weekday':\n    outputWeekday()\n    break\n  case 'monthday':\n    outputMonthday()\n    break\n  case 'dayname':\n    outputDayname()\n    break\n  case 'month':\n    outputMonth()\n    break\n  case 'monthname':\n    outputMonthname()\n    break\n  case 'year':\n    outputYear()\n    break\n  case 'date':\n    outputDate()\n    break\n  case 'datetime':\n    outputDateTime()\n    break\n  default:\n    outputDate()\n\n  }\n}\n\nfunction clearActiveElement () {\n  const activeElement = document.querySelector('.active')\n  if (activeElement) {\n    activeElement.classList.remove('active')\n  }\n}\n\nfunction handleFormChange () {\n  clearActiveElement()\n  outputResult('', '')\n}\n\nfunction handleCopy (e) {\n  if (codeOutput.innerText && !isCopied) {\n    navigator.clipboard.writeText(codeOutput.innerText)\n    const currentValue = e.target.innerText\n    e.target.innerText = 'Copied!'\n    isCopied = true\n    setTimeout(() => {\n      e.target.innerText = currentValue\n      isCopied = false\n    }, 2000)\n  }\n}\n\nasync function populateLocales () {\n  try {\n    const response = await fetch('https://restcountries.com/v3.1/all')\n    const countries = await response.json()\n\n    const localeSet = new Set()\n\n    countries.forEach(country => {\n      const countryCode = country.cca2\n      const languages = country.languages\n\n      if (languages && countryCode) {\n        Object.entries(languages).forEach(([ langCode, langName ]) => {\n          const locale = `${langCode}-${countryCode}`\n          const label = `${langName} (${countryCode})`\n          localeSet.add(JSON.stringify({ locale, label }))\n        })\n      }\n    })\n\n    const localeEntries = Array.from(localeSet).map(item => JSON.parse(item))\n    localeEntries.sort((a, b) => a.label.localeCompare(b.label))\n\n    localeSelect.innerHTML = ''\n    localeEntries.forEach(({ locale, label }) => {\n      const option = document.createElement('option')\n      option.value = locale\n      option.textContent = label\n      localeSelect.appendChild(option)\n    })\n  } catch (error) {\n    console.warn('Failed to load locales from API, using fallback.', error)\n  }\n}\n\nfunction getTimeZoneOffsetLabel (timeZone) {\n  try {\n    const now = new Date()\n    const options = {\n      timeZone,\n      hour: '2-digit',\n      minute: '2-digit',\n      timeZoneName: 'short'\n    }\n\n    const formatter = new Intl.DateTimeFormat('en-US', options)\n    const parts = formatter.formatToParts(now)\n    const tzPart = parts.find(p => p.type === 'timeZoneName')\n    return tzPart ? tzPart.value.replace('GMT', 'UTC') : ''\n  } catch (e) {\n    console.warn(e)\n    return ''\n  }\n}\n\nfunction populateTimeZones () {\n  let timeZones = []\n\n  // Modern browsers support this API\n  if (typeof Intl.supportedValuesOf === 'function') {\n    try {\n      timeZones = Intl.supportedValuesOf('timeZone')\n      // Sort by name\n      timeZones.sort()\n      timezoneSelect.innerHTML = ''\n      // Add options\n      timeZones.forEach(zone => {\n        const offsetLabel = getTimeZoneOffsetLabel(zone)\n        const option = document.createElement('option')\n        option.value = zone\n        option.textContent = `${zone} (${offsetLabel})`\n        timezoneSelect.appendChild(option)\n      })\n    } catch (e) {\n      console.warn('Intl.supportedValuesOf(\"timeZone\") not available, using fallback.', e)\n    }\n  }\n}\n\nexamples.forEach(example => example.addEventListener('click', handleExampleClick))\noptions.addEventListener('change', handleFormChange)\ncopy.addEventListener('click', handleCopy)\n\npopulateLocales()\npopulateTimeZones()"],"names":["date","Date","isCopied","currentDate","document","getElementById","localeSelect","timezoneSelect","timezoneFormatSelect","dayFormat","monthFormat","timeFormat","dateFormat","output","codeOutput","examples","querySelectorAll","options","copy","outputResult","result","code","currentDateValue","value","snippet","innerText","outputSeconds","getSeconds","getUTCSeconds","outputMinutes","getMinutes","getUTCMinutes","outputHours","getHours","getUTCHours","outputTime","timeFormatResult","toLocaleTimeString","hour12","timeZone","timeZoneName","outputWeekday","getDay","getUTCDay","outputMonthday","getDate","getUTCDate","outputDayname","toLocaleString","weekday","outputMonth","getMonth","getUTCMonth","outputMonthname","month","outputYear","getFullYear","getUTCFullYear","outputDate","toLocaleDateString","year","day","outputDateTime","hour","minute","second","handleExampleClick","e","element","currentTarget","id","clearActiveElement","classList","add","dateValue","activeElement","querySelector","remove","handleFormChange","handleCopy","navigator","clipboard","writeText","currentValue","target","setTimeout","populateLocales","response","fetch","countries","json","localeSet","Set","forEach","country","countryCode","cca2","languages","Object","entries","langCode","langName","locale","label","JSON","stringify","localeEntries","Array","from","map","item","parse","sort","a","b","localeCompare","innerHTML","option","createElement","textContent","appendChild","error","console","warn","getTimeZoneOffsetLabel","now","tzPart","parts","formatter","Intl","DateTimeFormat","formatToParts","find","p","type","replace","populateTimeZones","timeZones","supportedValuesOf","zone","offsetLabel","example","addEventListener"],"version":3,"file":"any-date.456fadbd.js.map"}